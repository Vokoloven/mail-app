{"version":3,"file":"static/js/345.723629ed.chunk.js","mappings":"uLAGaA,EAAQ,SAAHC,GAAqC,IAADC,EAA9BC,EAAQF,EAARE,SAAUC,EAAKH,EAALG,MAC9B,OACIC,EAAAA,EAAAA,KAACC,EAAAA,GAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACNC,GAAG,iBACHC,MAAM,QACNC,QAAQ,WACRN,QAASA,EAAMO,KACXR,EAAS,QAAM,IACnBS,WAAqB,QAAXV,EAAEE,EAAMO,WAAG,IAAAT,OAAA,EAATA,EAAWW,QACvBC,GAAI,CACAC,MAAO,OACP,sBAAuB,CACnBC,MAAO,eAEX,gCAAiC,CAC7BA,MAAO,cAEX,uCAAwC,CACpC,aAAc,CACVC,YAAa,gBAGrB,iDAAkD,CAC9C,aAAc,CACVA,YAAa,kBAMrC,E,sEC9BaC,GAAeC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAAe,SAAAlB,GAAA,IAAGoB,EAAKpB,EAALoB,MAAK,MAAQ,CACvDC,gBAAiBD,EAAME,QAAQC,OAAOC,KACtCT,MAAOK,EAAME,QAAQC,OAAOE,aAC5BC,OAAQ,wBACR,UAAW,CACPX,MAAOK,EAAME,QAAQC,OAAOC,KAC5BH,gBAAiBD,EAAME,QAAQK,WAAWC,MAC1CF,OAAO,aAADG,OAAeT,EAAME,QAAQC,OAAOC,OAEjD,I,UCRYM,EAASC,EAAAA,KAAaC,MAAM,CACrCtB,IAAKqB,EAAAA,KAAaE,QAHP,SAGuB,gBAAgBC,aCSzCC,EAAO,WAChB,IAAAC,GAA6CC,EAAAA,EAAAA,IAAiB,CAC1DC,UAAUC,EAAAA,EAAAA,GAAYT,KADlB5B,EAAQkC,EAARlC,SAAUsC,EAAYJ,EAAZI,aAAcC,EAAQL,EAARK,SAGhCC,GAA0BC,EAAAA,EAAAA,UAA+B,CAAC,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArDvC,EAAKyC,EAAA,GAAEE,EAAQF,EAAA,GAUtB,OACIG,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACAC,UAAW,OACXC,aAAc,MACdC,SAAUX,GAZuB,SAACY,GACtCX,EAAS,MAAO,IAChBK,EAAS,CAAC,EACd,IAC6C,SAACO,GAC1CP,EAASO,EACb,IAMkDC,SAAA,EAE1ClD,EAAAA,EAAAA,KAACL,EAAK,CAACG,SAAUA,EAAUC,MAAOA,KAClCC,EAAAA,EAAAA,KAACa,EAAY,CACTJ,GAAI,CAAE0C,GAAI,EAAGzC,MAAO,QACpB,aAAY,SACZ0C,KAAM,SAASF,SAClB,qBAKb,E,oBCzCaG,GAAoBvC,EAAAA,EAAAA,IAAOwC,EAAAA,EAAPxC,EAAkB,SAAAlB,GAAA,IAAA2D,EAAGvC,EAAKpB,EAALoB,MAAK,OAAAuC,EAAA,CACvDC,QAAS,IAACC,EAAAA,EAAAA,GAAAF,EACTvC,EAAM0C,YAAYC,GAAG,UAAY,CAC9BC,SAAU5C,EAAM0C,YAAYG,OAAOC,UACtCL,EAAAA,EAAAA,GAAAF,EACAvC,EAAM0C,YAAYC,GAAG,UAAY,CAC9BC,SAAU5C,EAAM0C,YAAYG,OAAOE,UACtCN,EAAAA,EAAAA,GAAAF,EACAvC,EAAM0C,YAAYC,GAAG,UAAY,CAC9BC,SAAU5C,EAAM0C,YAAYG,OAAOG,UACtCP,EAAAA,EAAAA,GAAAF,EACAvC,EAAM0C,YAAYC,GAAG,WAAa,CAC/BC,SAAU5C,EAAM0C,YAAYG,OAAOI,UACtCV,CAAA,ICdL,ECCa,WACT,OACIvD,EAAAA,EAAAA,KAACqD,EAAiB,CAAAH,UACdlD,EAAAA,EAAAA,KAAC+B,EAAI,KAGjB,C","sources":["components/form/Input.tsx","components/ui/Button/Button.tsx","validation/schema.ts","components/form/Form.tsx","components/container/AdaptiveContainer.tsx","pages/Home/index.ts","pages/Home/Home.tsx"],"sourcesContent":["import TextField from '@mui/material/TextField';\nimport { TProps } from 'types/tForm';\n\nexport const Input = ({ register, error }: TProps) => {\n    return (\n        <TextField\n            id=\"outlined-basic\"\n            label=\"TTN *\"\n            variant=\"outlined\"\n            error={!!error.ttn}\n            {...register('ttn')}\n            helperText={error.ttn?.message}\n            sx={{\n                width: '100%',\n                '& label.Mui-focused': {\n                    color: 'violet.main'\n                },\n                '& label.Mui-focused.Mui-error': {\n                    color: 'error.main'\n                },\n                '& .MuiOutlinedInput-root.Mui-focused': {\n                    '& fieldset': {\n                        borderColor: 'violet.main'\n                    }\n                },\n                '& .MuiOutlinedInput-root.Mui-focused.Mui-error': {\n                    '& fieldset': {\n                        borderColor: 'error.main'\n                    }\n                }\n            }}\n        />\n    );\n};\n","import { Button } from '@mui/material';\nimport { styled } from '@mui/material/styles';\n\nexport const CustomButton = styled(Button)(({ theme }) => ({\n    backgroundColor: theme.palette.violet.main,\n    color: theme.palette.violet.contrastText,\n    border: '1px solid transparent',\n    '&:hover': {\n        color: theme.palette.violet.main,\n        backgroundColor: theme.palette.background.paper,\n        border: `1px solid ${theme.palette.violet.main}`\n    }\n}));\n","import * as yup from 'yup';\n\nconst regExp = /[0-9]+/;\n\nexport const schema = yup.object().shape({\n    ttn: yup.string().matches(regExp, 'Wrong format').required()\n});\n","import { useState } from 'react';\nimport { Box } from '@mui/material';\nimport {\n    useForm,\n    SubmitHandler,\n    SubmitErrorHandler,\n    FieldErrors\n} from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { Input } from 'components/form';\nimport { CustomButton } from 'components/ui/Button';\nimport { schema } from 'validation';\nimport { TInputs } from 'types/tForm';\n\nexport const Form = () => {\n    const { register, handleSubmit, setValue } = useForm<TInputs>({\n        resolver: yupResolver(schema)\n    });\n    const [error, setError] = useState<FieldErrors<TInputs>>({});\n\n    const onSubmit: SubmitHandler<TInputs> = (data) => {\n        setValue('ttn', '');\n        setError({});\n    };\n    const onError: SubmitErrorHandler<TInputs> = (err) => {\n        setError(err);\n    };\n\n    return (\n        <Box\n            component={'form'}\n            autoComplete={'off'}\n            onSubmit={handleSubmit(onSubmit, onError)}\n        >\n            <Input register={register} error={error} />\n            <CustomButton\n                sx={{ mt: 4, width: '100%' }}\n                aria-label={'submit'}\n                type={'submit'}\n            >\n                Get status TTN\n            </CustomButton>\n        </Box>\n    );\n};\n","import { Container } from '@mui/material';\nimport { styled } from '@mui/material/styles';\n\nexport const AdaptiveContainer = styled(Container)(({ theme }) => ({\n    padding: 0,\n    [theme.breakpoints.up('mobile')]: {\n        maxWidth: theme.breakpoints.values.mobile\n    },\n    [theme.breakpoints.up('tablet')]: {\n        maxWidth: theme.breakpoints.values.tablet\n    },\n    [theme.breakpoints.up('laptop')]: {\n        maxWidth: theme.breakpoints.values.laptop\n    },\n    [theme.breakpoints.up('desktop')]: {\n        maxWidth: theme.breakpoints.values.desktop\n    }\n}));\n","import Home from './Home';\n\nexport default Home;\n","import { Form } from 'components/form';\nimport { AdaptiveContainer } from 'components/container';\n\nconst Home = () => {\n    return (\n        <AdaptiveContainer>\n            <Form />\n        </AdaptiveContainer>\n    );\n};\n\nexport default Home;\n"],"names":["Input","_ref","_error$ttn","register","error","_jsx","TextField","_objectSpread","id","label","variant","ttn","helperText","message","sx","width","color","borderColor","CustomButton","styled","Button","theme","backgroundColor","palette","violet","main","contrastText","border","background","paper","concat","schema","yup","shape","matches","required","Form","_useForm","useForm","resolver","yupResolver","handleSubmit","setValue","_useState","useState","_useState2","_slicedToArray","setError","_jsxs","Box","component","autoComplete","onSubmit","data","err","children","mt","type","AdaptiveContainer","Container","_ref2","padding","_defineProperty","breakpoints","up","maxWidth","values","mobile","tablet","laptop","desktop"],"sourceRoot":""}